pipeline{
    agent {
        node {
            label 'selfhosted-k8s'
        }
    }
	//agent any
    tools {
         dockerTool 'docker261'
         maven 'maven397' 
         jdk 'openjdk22'
         git 'git'
         dotnetsdk 'dotnetsdk'
    }
    environment {
		DOCKER_IMAGE_NAME = "riko20xx/springboot-dotnet:latest"
        DOCKER_IMAGE = ""
        DOCKER_HOST = "tcp://172.17.0.2:2375"
		NUGET_URL = "http://172.27.210.223:8083/repository/nuget-hosted/"
        DOCKER_CREDS = credentials('docker-token')
        DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
		SONARQUBE_HOST = "http://172.27.210.223:9000"
		SONARQUBE_TOKEN = credentials('sonarqube-token')
        PATH= "/root/.dotnet/tools/:$PATH"
    }
    stages{
        stage('Compiling') {
          steps {
		    sh 'dotnet nuget add source ${NUGET_URL}' 
            dotnetBuild project: '.', sdk: 'dotnetsdk'
          }
        }
        stage('Run Test') {
          steps {		    
            dotnetTest project: '.', sdk: 'dotnetsdk'
          }
        }		
        stage('Packaging') {
          steps {
            dotnetPublish outputDirectory: 'app/', sdk: 'dotnetsdk', selfContained: false
			dotnetPack project: '.', sdk: 'dotnetsdk'
          }
        }
        stage('Build image') {
          steps {           
            script{                
                withDockerRegistry(credentialsId: 'docker-login', toolName: 'docker261', url: '') {                    
                    dockerImage = docker.build "${DOCKER_IMAGE_NAME}"
                }
            }
          }
        }
        //stage('Trivy Scanning') {
        //   steps {
        //      sh 'curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh |sh -s -- -b /usr/local/bin v0.51.2'             
        //      sh 'trivy image --debug --scanners vuln --timeout 30m --no-progress -o trivy.txt ${DOCKER_IMAGE_NAME}'
        //   }
        //}	
        stage('SonarQube Analysis') {
          steps {
		     sh 'dotnet tool install --global coverlet.console'
			 sh 'dotnet tool install --global dotnet-sonarscanner'			 
             sh 'dotnet sonarscanner begin /k:"springboot-dotnet" /d:sonar.host.url="${SONARQUBE_HOST}" /d:sonar.login="${SONARQUBE_TOKEN}" /d:sonar.cs.opencover.reportsPaths=coverage.xml'
			 sh 'dotnet build --no-incremental'
			 sh 'coverlet ./HelloWorldNTest/bin/Debug/net8.0/HelloWorldNTest.dll --target "dotnet" --targetargs "test --no-build" -f=opencover -o="coverage.xml" --exclude-by-file "**/program.cs"'
			 sh 'dotnet sonarscanner end /d:sonar.login="${SONARQUBE_TOKEN}"'
          }
        }		
        stage('Push image') {
          steps {           
            script{                
                withDockerRegistry(credentialsId: 'docker-login', toolName: 'docker261', url: '') {
                    dockerImage.push()
                }
            }
          }
        }    
        stage('Publish Artifact') {
          steps {
			 dotnetNuGetPush apiKeyId: 'dotnet-nuget-api-key', root: 'HelloWorld/bin/Release/HelloWorld.0.0.2.nupkg', sdk: 'dotnetsdk', source: '${NUGET_URL}'
          }
        }
        stage('Deploying image to k8s') {
          steps {
              withKubeConfig(credentialsId: 'k8s-deployer-token', clusterName: 'kubernetes-admin@kubernetes', contextName: 'kubernetes-admin@kubernetes', namespace: '', restrictKubeConfigAccess: false, serverUrl: 'https://172.27.210.223:6443') {
                 sh 'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
                 sh 'chmod u+x ./kubectl'
                 sh './kubectl apply -f deployment.yaml -n default'
              }
          }
        }
    }
	//post {
	//	always {
	//		archiveArtifacts artifacts: 'trivy.txt', fingerprint: true
	//		publishHTML(
	//			[allowMissing: false, 
	//			alwaysLinkToLastBuild: false, 
	//			keepAll: false, 
	//			reportDir: '.', 
	//			reportFiles: 'trivy.txt', 
	//			reportName: 'TrivyReport', 
	//			reportTitles: '', 
	//			useWrapperFileDirectly: true]
	//		)
	//	}
	//}	
}
